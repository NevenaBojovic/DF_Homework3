/**
 * Document: MaxCompiler Tutorial (maxcompiler-tutorial.pdf)
 * Chapter: 6
 * Example: 3
 * Summary:
 */
package vectors;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorType;

class VectorsKernel extends Kernel {

	VectorsKernel(KernelParameters parameters, int vectorSize) {
		super(parameters);
		DFEVectorType<DFEVar> vectorType =
			new DFEVectorType<DFEVar>(dfeUInt(32), vectorSize);

		// Input
		DFEVector<DFEVar> inVector1 = io.input("inVector1", vectorType);
		DFEVector<DFEVar> inVector2 = io.input("inVector2", vectorType);
        int dim = (int)Math.round(Math.sqrt(vectorSize));
		//Math.sqrt(vectorSize)
		DFEVector<DFEVar> resultVector = vectorType.newInstance(this);

        // adresna funkcija
        for (int i = 0; i < Math.sqrt(vectorSize); i++){
	        for (int j = 0; j < Math.sqrt(vectorSize); j++){
		    DFEVar temp = constant.var(dfeUInt(32), 0);
		        for (int k = 0; k < Math.sqrt(vectorSize); k++){
		            //temp = temp + inVector1[][] * inVector2[][] 
		            temp = temp + inVector1[dim*i + k]*inVector2[j + dim*k];
		        }      
		        resultVector[dim*i + j] <== temp;
		    }
	    }
	    
		//for (int i = 0; i < vectorSize; i++){
		//   DFEVar temp = constant.var(dfeUInt(32), 0);
		//   temp =  inVector1[i] + inVector2[i];
		//   resultVector[i] <== temp;
		//}
		//Output
		io.output("outVector", resultVector, vectorType);
	}
}
