/**
 * Document: MaxCompiler Tutorial (maxcompiler-tutorial.pdf)
 * Chapter: 6      Example: 3      Name: Vectors
 * MaxFile name: Vectors
 * Summary:
 *    Streams a vector of integers to the dataflow engine and confirms that the
 *    returned stream contains the integers values doubled.
 */

#include <stdio.h>
#include <stdlib.h>
#include "Maxfiles.h"
#include <MaxSLiCInterface.h>
#include <math.h>

int check(int vectorSize, uint32_t *outVector, uint32_t *expectedVector)
{
	int status = 0;
	for (int i = 0; i < vectorSize * Vectors_vectorSize; i++) {
		if (outVector[i] != expectedVector[i]) {
			fprintf(stderr, "Error detected outVector[%d] != %d\n",
				outVector[i], expectedVector[i]);
			status = 1;
		}
	}
	return status;
}



void VectorsCPU(int32_t vectorSize, uint32_t *inVector_1, uint32_t *inVector_2, uint32_t *outVector)
{
   // for (int i = 0; i < vectorSize * Vectors_vectorSize; i++) {
		//outVector[i] = inVector[i] * 8;
		for(int i = 0; i < sqrt(vectorSize * Vectors_vectorSize); i++){    
            for(int j = 0; j < sqrt(vectorSize * Vectors_vectorSize); j++){    
                int temp = 0;    
                for(int k = 0; k < sqrt(vectorSize * Vectors_vectorSize); k++){    
                    temp+=inVector_1[(int)round(sqrt(vectorSize * Vectors_vectorSize))*i + k]*inVector_2[j + (int)round(sqrt(vectorSize * Vectors_vectorSize))*k];    
                }   
                outVector[(int)round(sqrt(vectorSize * Vectors_vectorSize))*i + j] = temp;
                fprintf(stderr, "outVectorCPU[%d]\n", outVector[(int)round(sqrt(vectorSize * Vectors_vectorSize))*i + j]);
            }    
        } 
  //}
}

int main()
{
	const int vectorSize = Vectors_vectorSize;
	printf("Vector size = %d ///", vectorSize);
	//const int streamSize = 16;
	const int streamSize = 2;
	size_t sizeBytes = vectorSize * streamSize * sizeof(uint32_t);
	//uint32_t *inVector = malloc(sizeBytes);
	uint32_t *inVector1 = malloc(sizeBytes);
	uint32_t *inVector2 = malloc(sizeBytes);
	uint32_t *outVector = malloc(sizeBytes);
	uint32_t *outVectorCPU = malloc(sizeBytes);
	uint32_t *expectedVector = malloc(sizeBytes);
    
    int size = vectorSize * streamSize;
    
    //printf("Vector size puta streamSize = %d ///", size);
    
	for (int i = 0; i < vectorSize * streamSize; i++) {
		inVector1[i] = i;
		inVector2[i] = i;
	//	printf("Vector number = %d ///", inVector2[i]);
	}

	for (int i = 0; i < vectorSize * streamSize; i++) {
		outVector[i] = 0;
		outVectorCPU[i] = 0;
	}

	VectorsCPU(streamSize, inVector1, inVector2, outVectorCPU);

	printf("Running DFE.\n");
	//Vectors(streamSize, inVector, expectedVector);
	Vectors(streamSize, inVector1, inVector2, expectedVector);
	//VectorsCPU(streamSize, inVector1, inVector2, outVector);
	for (int i = 0; i < vectorSize * streamSize; i++) {
		printf("inVector1[%d] = %d\n", i, inVector1[i]);
	}
	for (int i = 0; i < vectorSize * streamSize; i++) {
		printf("inVector2[%d] = %d\n", i, inVector2[i]);
	}
    /*for(int i = 0; i < vectorSize * streamSize; i++){
        printf("outVector[%d] = %d\n", i, outVector[i]);
    }*/
    for(int i = 0; i < vectorSize * streamSize; i++){
        printf("expectedVector[%d] = %d\n", i, expectedVector[i]);
    }
    //printf("Number = %d", sqrt(vectorSize * Vectors_vectorSize));
	//int status = check(streamSize, outVector, outVectorCPU);
	//if (status)
	//	printf("Test failed.\n");
	//else
	//	printf("Test passed OK!\n");
    return 0;
	//return status;
}
